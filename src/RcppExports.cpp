// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/qs.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// check_SIMD
std::string check_SIMD();
static SEXP _qs_check_SIMD_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(check_SIMD());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_check_SIMD() {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_check_SIMD_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// zstd_compress_bound
int zstd_compress_bound(const int size);
static SEXP _qs_zstd_compress_bound_try(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(zstd_compress_bound(size));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_zstd_compress_bound(SEXP sizeSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_zstd_compress_bound_try(sizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lz4_compress_bound
int lz4_compress_bound(const int size);
static SEXP _qs_lz4_compress_bound_try(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(lz4_compress_bound(size));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_lz4_compress_bound(SEXP sizeSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_lz4_compress_bound_try(sizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// zstd_compress_raw
std::vector<unsigned char> zstd_compress_raw(SEXP const x, const int compress_level);
static SEXP _qs_zstd_compress_raw_try(SEXP xSEXP, SEXP compress_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type compress_level(compress_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(zstd_compress_raw(x, compress_level));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_zstd_compress_raw(SEXP xSEXP, SEXP compress_levelSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_zstd_compress_raw_try(xSEXP, compress_levelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// zstd_decompress_raw
RawVector zstd_decompress_raw(SEXP const x);
static SEXP _qs_zstd_decompress_raw_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(zstd_decompress_raw(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_zstd_decompress_raw(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_zstd_decompress_raw_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lz4_compress_raw
std::vector<unsigned char> lz4_compress_raw(SEXP const x, const int compress_level);
static SEXP _qs_lz4_compress_raw_try(SEXP xSEXP, SEXP compress_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type compress_level(compress_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(lz4_compress_raw(x, compress_level));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_lz4_compress_raw(SEXP xSEXP, SEXP compress_levelSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_lz4_compress_raw_try(xSEXP, compress_levelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lz4_decompress_raw
std::vector<unsigned char> lz4_decompress_raw(SEXP const x);
static SEXP _qs_lz4_decompress_raw_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(lz4_decompress_raw(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_lz4_decompress_raw(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_lz4_decompress_raw_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// blosc_shuffle_raw
std::vector<unsigned char> blosc_shuffle_raw(SEXP const x, int bytesofsize);
static SEXP _qs_blosc_shuffle_raw_try(SEXP xSEXP, SEXP bytesofsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type bytesofsize(bytesofsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(blosc_shuffle_raw(x, bytesofsize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_blosc_shuffle_raw(SEXP xSEXP, SEXP bytesofsizeSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_blosc_shuffle_raw_try(xSEXP, bytesofsizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// blosc_unshuffle_raw
std::vector<unsigned char> blosc_unshuffle_raw(SEXP const x, int bytesofsize);
static SEXP _qs_blosc_unshuffle_raw_try(SEXP xSEXP, SEXP bytesofsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type bytesofsize(bytesofsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(blosc_unshuffle_raw(x, bytesofsize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_blosc_unshuffle_raw(SEXP xSEXP, SEXP bytesofsizeSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_blosc_unshuffle_raw_try(xSEXP, bytesofsizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// xxhash_raw
std::string xxhash_raw(SEXP const x);
static SEXP _qs_xxhash_raw_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(xxhash_raw(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_xxhash_raw(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_xxhash_raw_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// base85_encode
std::string base85_encode(const RawVector& rawdata);
static SEXP _qs_base85_encode_try(SEXP rawdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const RawVector& >::type rawdata(rawdataSEXP);
    rcpp_result_gen = Rcpp::wrap(base85_encode(rawdata));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_base85_encode(SEXP rawdataSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_base85_encode_try(rawdataSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// base85_decode
RawVector base85_decode(const std::string& encoded_string);
static SEXP _qs_base85_decode_try(SEXP encoded_stringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type encoded_string(encoded_stringSEXP);
    rcpp_result_gen = Rcpp::wrap(base85_decode(encoded_string));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_base85_decode(SEXP encoded_stringSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_base85_decode_try(encoded_stringSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// c_base91_encode
std::string c_base91_encode(const RawVector& rawdata);
static SEXP _qs_c_base91_encode_try(SEXP rawdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const RawVector& >::type rawdata(rawdataSEXP);
    rcpp_result_gen = Rcpp::wrap(c_base91_encode(rawdata));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_c_base91_encode(SEXP rawdataSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_c_base91_encode_try(rawdataSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// c_base91_decode
RawVector c_base91_decode(const std::string& encoded_string);
static SEXP _qs_c_base91_decode_try(SEXP encoded_stringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type encoded_string(encoded_stringSEXP);
    rcpp_result_gen = Rcpp::wrap(c_base91_decode(encoded_string));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_c_base91_decode(SEXP encoded_stringSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_c_base91_decode_try(encoded_stringSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// is_big_endian
bool is_big_endian();
static SEXP _qs_is_big_endian_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(is_big_endian());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_is_big_endian() {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_is_big_endian_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qsave
double qsave(SEXP const x, const std::string& file, const std::string preset, const std::string algorithm, const int compress_level, const int shuffle_control, const bool check_hash, const int nthreads);
static SEXP _qs_qsave_try(SEXP xSEXP, SEXP fileSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type preset(presetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const int >::type compress_level(compress_levelSEXP);
    Rcpp::traits::input_parameter< const int >::type shuffle_control(shuffle_controlSEXP);
    Rcpp::traits::input_parameter< const bool >::type check_hash(check_hashSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(qsave(x, file, preset, algorithm, compress_level, shuffle_control, check_hash, nthreads));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_qsave(SEXP xSEXP, SEXP fileSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP, SEXP nthreadsSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_qsave_try(xSEXP, fileSEXP, presetSEXP, algorithmSEXP, compress_levelSEXP, shuffle_controlSEXP, check_hashSEXP, nthreadsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// c_qsave
double c_qsave(SEXP const x, const std::string& file, const std::string preset, const std::string algorithm, const int compress_level, const int shuffle_control, const bool check_hash, const int nthreads);
static SEXP _qs_c_qsave_try(SEXP xSEXP, SEXP fileSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type preset(presetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const int >::type compress_level(compress_levelSEXP);
    Rcpp::traits::input_parameter< const int >::type shuffle_control(shuffle_controlSEXP);
    Rcpp::traits::input_parameter< const bool >::type check_hash(check_hashSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_qsave(x, file, preset, algorithm, compress_level, shuffle_control, check_hash, nthreads));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_c_qsave(SEXP xSEXP, SEXP fileSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP, SEXP nthreadsSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_c_qsave_try(xSEXP, fileSEXP, presetSEXP, algorithmSEXP, compress_levelSEXP, shuffle_controlSEXP, check_hashSEXP, nthreadsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qsave_fd
double qsave_fd(SEXP const x, const int fd, const std::string preset, const std::string algorithm, const int compress_level, const int shuffle_control, const bool check_hash);
static SEXP _qs_qsave_fd_try(SEXP xSEXP, SEXP fdSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type fd(fdSEXP);
    Rcpp::traits::input_parameter< const std::string >::type preset(presetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const int >::type compress_level(compress_levelSEXP);
    Rcpp::traits::input_parameter< const int >::type shuffle_control(shuffle_controlSEXP);
    Rcpp::traits::input_parameter< const bool >::type check_hash(check_hashSEXP);
    rcpp_result_gen = Rcpp::wrap(qsave_fd(x, fd, preset, algorithm, compress_level, shuffle_control, check_hash));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_qsave_fd(SEXP xSEXP, SEXP fdSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_qsave_fd_try(xSEXP, fdSEXP, presetSEXP, algorithmSEXP, compress_levelSEXP, shuffle_controlSEXP, check_hashSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qsave_handle
double qsave_handle(SEXP const x, SEXP const handle, const std::string preset, const std::string algorithm, const int compress_level, const int shuffle_control, const bool check_hash);
static SEXP _qs_qsave_handle_try(SEXP xSEXP, SEXP handleSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP const >::type handle(handleSEXP);
    Rcpp::traits::input_parameter< const std::string >::type preset(presetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const int >::type compress_level(compress_levelSEXP);
    Rcpp::traits::input_parameter< const int >::type shuffle_control(shuffle_controlSEXP);
    Rcpp::traits::input_parameter< const bool >::type check_hash(check_hashSEXP);
    rcpp_result_gen = Rcpp::wrap(qsave_handle(x, handle, preset, algorithm, compress_level, shuffle_control, check_hash));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_qsave_handle(SEXP xSEXP, SEXP handleSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_qsave_handle_try(xSEXP, handleSEXP, presetSEXP, algorithmSEXP, compress_levelSEXP, shuffle_controlSEXP, check_hashSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qserialize
RawVector qserialize(SEXP const x, const std::string preset, const std::string algorithm, const int compress_level, const int shuffle_control, const bool check_hash);
static SEXP _qs_qserialize_try(SEXP xSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type preset(presetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const int >::type compress_level(compress_levelSEXP);
    Rcpp::traits::input_parameter< const int >::type shuffle_control(shuffle_controlSEXP);
    Rcpp::traits::input_parameter< const bool >::type check_hash(check_hashSEXP);
    rcpp_result_gen = Rcpp::wrap(qserialize(x, preset, algorithm, compress_level, shuffle_control, check_hash));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_qserialize(SEXP xSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_qserialize_try(xSEXP, presetSEXP, algorithmSEXP, compress_levelSEXP, shuffle_controlSEXP, check_hashSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// c_qserialize
RawVector c_qserialize(SEXP const x, const std::string preset, const std::string algorithm, const int compress_level, const int shuffle_control, const bool check_hash);
static SEXP _qs_c_qserialize_try(SEXP xSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type preset(presetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const int >::type compress_level(compress_levelSEXP);
    Rcpp::traits::input_parameter< const int >::type shuffle_control(shuffle_controlSEXP);
    Rcpp::traits::input_parameter< const bool >::type check_hash(check_hashSEXP);
    rcpp_result_gen = Rcpp::wrap(c_qserialize(x, preset, algorithm, compress_level, shuffle_control, check_hash));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_c_qserialize(SEXP xSEXP, SEXP presetSEXP, SEXP algorithmSEXP, SEXP compress_levelSEXP, SEXP shuffle_controlSEXP, SEXP check_hashSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_c_qserialize_try(xSEXP, presetSEXP, algorithmSEXP, compress_levelSEXP, shuffle_controlSEXP, check_hashSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qread
SEXP qread(const std::string& file, const bool use_alt_rep, const bool strict, const int nthreads);
static SEXP _qs_qread_try(SEXP fileSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_alt_rep(use_alt_repSEXP);
    Rcpp::traits::input_parameter< const bool >::type strict(strictSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(qread(file, use_alt_rep, strict, nthreads));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_qread(SEXP fileSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP, SEXP nthreadsSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_qread_try(fileSEXP, use_alt_repSEXP, strictSEXP, nthreadsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// c_qattributes
SEXP c_qattributes(const std::string& file, const bool use_alt_rep, const bool strict, const int nthreads);
static SEXP _qs_c_qattributes_try(SEXP fileSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_alt_rep(use_alt_repSEXP);
    Rcpp::traits::input_parameter< const bool >::type strict(strictSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_qattributes(file, use_alt_rep, strict, nthreads));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_c_qattributes(SEXP fileSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP, SEXP nthreadsSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_c_qattributes_try(fileSEXP, use_alt_repSEXP, strictSEXP, nthreadsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// c_qread
SEXP c_qread(const std::string& file, const bool use_alt_rep, const bool strict, const int nthreads);
static SEXP _qs_c_qread_try(SEXP fileSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_alt_rep(use_alt_repSEXP);
    Rcpp::traits::input_parameter< const bool >::type strict(strictSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_qread(file, use_alt_rep, strict, nthreads));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_c_qread(SEXP fileSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP, SEXP nthreadsSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_c_qread_try(fileSEXP, use_alt_repSEXP, strictSEXP, nthreadsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qread_fd
SEXP qread_fd(const int fd, const bool use_alt_rep, const bool strict);
static SEXP _qs_qread_fd_try(SEXP fdSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type fd(fdSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_alt_rep(use_alt_repSEXP);
    Rcpp::traits::input_parameter< const bool >::type strict(strictSEXP);
    rcpp_result_gen = Rcpp::wrap(qread_fd(fd, use_alt_rep, strict));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_qread_fd(SEXP fdSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_qread_fd_try(fdSEXP, use_alt_repSEXP, strictSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qread_handle
SEXP qread_handle(SEXP const handle, const bool use_alt_rep, const bool strict);
static SEXP _qs_qread_handle_try(SEXP handleSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type handle(handleSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_alt_rep(use_alt_repSEXP);
    Rcpp::traits::input_parameter< const bool >::type strict(strictSEXP);
    rcpp_result_gen = Rcpp::wrap(qread_handle(handle, use_alt_rep, strict));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_qread_handle(SEXP handleSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_qread_handle_try(handleSEXP, use_alt_repSEXP, strictSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qread_ptr
SEXP qread_ptr(SEXP const pointer, const double length, const bool use_alt_rep, const bool strict);
static SEXP _qs_qread_ptr_try(SEXP pointerSEXP, SEXP lengthSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type pointer(pointerSEXP);
    Rcpp::traits::input_parameter< const double >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_alt_rep(use_alt_repSEXP);
    Rcpp::traits::input_parameter< const bool >::type strict(strictSEXP);
    rcpp_result_gen = Rcpp::wrap(qread_ptr(pointer, length, use_alt_rep, strict));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_qread_ptr(SEXP pointerSEXP, SEXP lengthSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_qread_ptr_try(pointerSEXP, lengthSEXP, use_alt_repSEXP, strictSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qdeserialize
SEXP qdeserialize(SEXP const x, const bool use_alt_rep, const bool strict);
static SEXP _qs_qdeserialize_try(SEXP xSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_alt_rep(use_alt_repSEXP);
    Rcpp::traits::input_parameter< const bool >::type strict(strictSEXP);
    rcpp_result_gen = Rcpp::wrap(qdeserialize(x, use_alt_rep, strict));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_qdeserialize(SEXP xSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_qdeserialize_try(xSEXP, use_alt_repSEXP, strictSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// c_qdeserialize
SEXP c_qdeserialize(SEXP const x, const bool use_alt_rep, const bool strict);
static SEXP _qs_c_qdeserialize_try(SEXP xSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_alt_rep(use_alt_repSEXP);
    Rcpp::traits::input_parameter< const bool >::type strict(strictSEXP);
    rcpp_result_gen = Rcpp::wrap(c_qdeserialize(x, use_alt_rep, strict));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_c_qdeserialize(SEXP xSEXP, SEXP use_alt_repSEXP, SEXP strictSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_c_qdeserialize_try(xSEXP, use_alt_repSEXP, strictSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// qdump
RObject qdump(const std::string& file);
static SEXP _qs_qdump_try(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(qdump(file));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_qdump(SEXP fileSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_qdump_try(fileSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// openFd
int openFd(const std::string& file, const std::string& mode);
static SEXP _qs_openFd_try(SEXP fileSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(openFd(file, mode));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_openFd(SEXP fileSEXP, SEXP modeSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_openFd_try(fileSEXP, modeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// readFdDirect
SEXP readFdDirect(const int fd, const int n_bytes);
static SEXP _qs_readFdDirect_try(SEXP fdSEXP, SEXP n_bytesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type fd(fdSEXP);
    Rcpp::traits::input_parameter< const int >::type n_bytes(n_bytesSEXP);
    rcpp_result_gen = Rcpp::wrap(readFdDirect(fd, n_bytes));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_readFdDirect(SEXP fdSEXP, SEXP n_bytesSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_readFdDirect_try(fdSEXP, n_bytesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// closeFd
int closeFd(const int fd);
static SEXP _qs_closeFd_try(SEXP fdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type fd(fdSEXP);
    rcpp_result_gen = Rcpp::wrap(closeFd(fd));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_closeFd(SEXP fdSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_closeFd_try(fdSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// openMmap
SEXP openMmap(const int fd, const double length);
static SEXP _qs_openMmap_try(SEXP fdSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type fd(fdSEXP);
    Rcpp::traits::input_parameter< const double >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(openMmap(fd, length));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_openMmap(SEXP fdSEXP, SEXP lengthSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_openMmap_try(fdSEXP, lengthSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// closeMmap
int closeMmap(SEXP const map, const double length);
static SEXP _qs_closeMmap_try(SEXP mapSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type map(mapSEXP);
    Rcpp::traits::input_parameter< const double >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(closeMmap(map, length));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_closeMmap(SEXP mapSEXP, SEXP lengthSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_closeMmap_try(mapSEXP, lengthSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// openHandle
SEXP openHandle(const std::string& file, const std::string& mode);
static SEXP _qs_openHandle_try(SEXP fileSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(openHandle(file, mode));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_openHandle(SEXP fileSEXP, SEXP modeSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_openHandle_try(fileSEXP, modeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// closeHandle
bool closeHandle(SEXP const handle);
static SEXP _qs_closeHandle_try(SEXP handleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type handle(handleSEXP);
    rcpp_result_gen = Rcpp::wrap(closeHandle(handle));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_closeHandle(SEXP handleSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_closeHandle_try(handleSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// openWinFileMapping
SEXP openWinFileMapping(SEXP const handle, const double length);
static SEXP _qs_openWinFileMapping_try(SEXP handleSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type handle(handleSEXP);
    Rcpp::traits::input_parameter< const double >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(openWinFileMapping(handle, length));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_openWinFileMapping(SEXP handleSEXP, SEXP lengthSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_openWinFileMapping_try(handleSEXP, lengthSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// openWinMapView
SEXP openWinMapView(SEXP const handle, const double length);
static SEXP _qs_openWinMapView_try(SEXP handleSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type handle(handleSEXP);
    Rcpp::traits::input_parameter< const double >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(openWinMapView(handle, length));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_openWinMapView(SEXP handleSEXP, SEXP lengthSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_openWinMapView_try(handleSEXP, lengthSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// closeWinMapView
bool closeWinMapView(SEXP const pointer);
static SEXP _qs_closeWinMapView_try(SEXP pointerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP const >::type pointer(pointerSEXP);
    rcpp_result_gen = Rcpp::wrap(closeWinMapView(pointer));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _qs_closeWinMapView(SEXP pointerSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_qs_closeWinMapView_try(pointerSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _qs_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("std::string(*check_SIMD)()");
        signatures.insert("int(*zstd_compress_bound)(const int)");
        signatures.insert("int(*lz4_compress_bound)(const int)");
        signatures.insert("std::vector<unsigned char>(*zstd_compress_raw)(SEXP const,const int)");
        signatures.insert("RawVector(*zstd_decompress_raw)(SEXP const)");
        signatures.insert("std::vector<unsigned char>(*lz4_compress_raw)(SEXP const,const int)");
        signatures.insert("std::vector<unsigned char>(*lz4_decompress_raw)(SEXP const)");
        signatures.insert("std::vector<unsigned char>(*blosc_shuffle_raw)(SEXP const,int)");
        signatures.insert("std::vector<unsigned char>(*blosc_unshuffle_raw)(SEXP const,int)");
        signatures.insert("std::string(*xxhash_raw)(SEXP const)");
        signatures.insert("std::string(*base85_encode)(const RawVector&)");
        signatures.insert("RawVector(*base85_decode)(const std::string&)");
        signatures.insert("std::string(*c_base91_encode)(const RawVector&)");
        signatures.insert("RawVector(*c_base91_decode)(const std::string&)");
        signatures.insert("bool(*is_big_endian)()");
        signatures.insert("double(*qsave)(SEXP const,const std::string&,const std::string,const std::string,const int,const int,const bool,const int)");
        signatures.insert("double(*c_qsave)(SEXP const,const std::string&,const std::string,const std::string,const int,const int,const bool,const int)");
        signatures.insert("double(*qsave_fd)(SEXP const,const int,const std::string,const std::string,const int,const int,const bool)");
        signatures.insert("double(*qsave_handle)(SEXP const,SEXP const,const std::string,const std::string,const int,const int,const bool)");
        signatures.insert("RawVector(*qserialize)(SEXP const,const std::string,const std::string,const int,const int,const bool)");
        signatures.insert("RawVector(*c_qserialize)(SEXP const,const std::string,const std::string,const int,const int,const bool)");
        signatures.insert("SEXP(*qread)(const std::string&,const bool,const bool,const int)");
        signatures.insert("SEXP(*c_qattributes)(const std::string&,const bool,const bool,const int)");
        signatures.insert("SEXP(*c_qread)(const std::string&,const bool,const bool,const int)");
        signatures.insert("SEXP(*qread_fd)(const int,const bool,const bool)");
        signatures.insert("SEXP(*qread_handle)(SEXP const,const bool,const bool)");
        signatures.insert("SEXP(*qread_ptr)(SEXP const,const double,const bool,const bool)");
        signatures.insert("SEXP(*qdeserialize)(SEXP const,const bool,const bool)");
        signatures.insert("SEXP(*c_qdeserialize)(SEXP const,const bool,const bool)");
        signatures.insert("RObject(*qdump)(const std::string&)");
        signatures.insert("int(*openFd)(const std::string&,const std::string&)");
        signatures.insert("SEXP(*readFdDirect)(const int,const int)");
        signatures.insert("int(*closeFd)(const int)");
        signatures.insert("SEXP(*openMmap)(const int,const double)");
        signatures.insert("int(*closeMmap)(SEXP const,const double)");
        signatures.insert("SEXP(*openHandle)(const std::string&,const std::string&)");
        signatures.insert("bool(*closeHandle)(SEXP const)");
        signatures.insert("SEXP(*openWinFileMapping)(SEXP const,const double)");
        signatures.insert("SEXP(*openWinMapView)(SEXP const,const double)");
        signatures.insert("bool(*closeWinMapView)(SEXP const)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _qs_RcppExport_registerCCallable() { 
    R_RegisterCCallable("qs", "_qs_check_SIMD", (DL_FUNC)_qs_check_SIMD_try);
    R_RegisterCCallable("qs", "_qs_zstd_compress_bound", (DL_FUNC)_qs_zstd_compress_bound_try);
    R_RegisterCCallable("qs", "_qs_lz4_compress_bound", (DL_FUNC)_qs_lz4_compress_bound_try);
    R_RegisterCCallable("qs", "_qs_zstd_compress_raw", (DL_FUNC)_qs_zstd_compress_raw_try);
    R_RegisterCCallable("qs", "_qs_zstd_decompress_raw", (DL_FUNC)_qs_zstd_decompress_raw_try);
    R_RegisterCCallable("qs", "_qs_lz4_compress_raw", (DL_FUNC)_qs_lz4_compress_raw_try);
    R_RegisterCCallable("qs", "_qs_lz4_decompress_raw", (DL_FUNC)_qs_lz4_decompress_raw_try);
    R_RegisterCCallable("qs", "_qs_blosc_shuffle_raw", (DL_FUNC)_qs_blosc_shuffle_raw_try);
    R_RegisterCCallable("qs", "_qs_blosc_unshuffle_raw", (DL_FUNC)_qs_blosc_unshuffle_raw_try);
    R_RegisterCCallable("qs", "_qs_xxhash_raw", (DL_FUNC)_qs_xxhash_raw_try);
    R_RegisterCCallable("qs", "_qs_base85_encode", (DL_FUNC)_qs_base85_encode_try);
    R_RegisterCCallable("qs", "_qs_base85_decode", (DL_FUNC)_qs_base85_decode_try);
    R_RegisterCCallable("qs", "_qs_c_base91_encode", (DL_FUNC)_qs_c_base91_encode_try);
    R_RegisterCCallable("qs", "_qs_c_base91_decode", (DL_FUNC)_qs_c_base91_decode_try);
    R_RegisterCCallable("qs", "_qs_is_big_endian", (DL_FUNC)_qs_is_big_endian_try);
    R_RegisterCCallable("qs", "_qs_qsave", (DL_FUNC)_qs_qsave_try);
    R_RegisterCCallable("qs", "_qs_c_qsave", (DL_FUNC)_qs_c_qsave_try);
    R_RegisterCCallable("qs", "_qs_qsave_fd", (DL_FUNC)_qs_qsave_fd_try);
    R_RegisterCCallable("qs", "_qs_qsave_handle", (DL_FUNC)_qs_qsave_handle_try);
    R_RegisterCCallable("qs", "_qs_qserialize", (DL_FUNC)_qs_qserialize_try);
    R_RegisterCCallable("qs", "_qs_c_qserialize", (DL_FUNC)_qs_c_qserialize_try);
    R_RegisterCCallable("qs", "_qs_qread", (DL_FUNC)_qs_qread_try);
    R_RegisterCCallable("qs", "_qs_c_qattributes", (DL_FUNC)_qs_c_qattributes_try);
    R_RegisterCCallable("qs", "_qs_c_qread", (DL_FUNC)_qs_c_qread_try);
    R_RegisterCCallable("qs", "_qs_qread_fd", (DL_FUNC)_qs_qread_fd_try);
    R_RegisterCCallable("qs", "_qs_qread_handle", (DL_FUNC)_qs_qread_handle_try);
    R_RegisterCCallable("qs", "_qs_qread_ptr", (DL_FUNC)_qs_qread_ptr_try);
    R_RegisterCCallable("qs", "_qs_qdeserialize", (DL_FUNC)_qs_qdeserialize_try);
    R_RegisterCCallable("qs", "_qs_c_qdeserialize", (DL_FUNC)_qs_c_qdeserialize_try);
    R_RegisterCCallable("qs", "_qs_qdump", (DL_FUNC)_qs_qdump_try);
    R_RegisterCCallable("qs", "_qs_openFd", (DL_FUNC)_qs_openFd_try);
    R_RegisterCCallable("qs", "_qs_readFdDirect", (DL_FUNC)_qs_readFdDirect_try);
    R_RegisterCCallable("qs", "_qs_closeFd", (DL_FUNC)_qs_closeFd_try);
    R_RegisterCCallable("qs", "_qs_openMmap", (DL_FUNC)_qs_openMmap_try);
    R_RegisterCCallable("qs", "_qs_closeMmap", (DL_FUNC)_qs_closeMmap_try);
    R_RegisterCCallable("qs", "_qs_openHandle", (DL_FUNC)_qs_openHandle_try);
    R_RegisterCCallable("qs", "_qs_closeHandle", (DL_FUNC)_qs_closeHandle_try);
    R_RegisterCCallable("qs", "_qs_openWinFileMapping", (DL_FUNC)_qs_openWinFileMapping_try);
    R_RegisterCCallable("qs", "_qs_openWinMapView", (DL_FUNC)_qs_openWinMapView_try);
    R_RegisterCCallable("qs", "_qs_closeWinMapView", (DL_FUNC)_qs_closeWinMapView_try);
    R_RegisterCCallable("qs", "_qs_RcppExport_validate", (DL_FUNC)_qs_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_qs_check_SIMD", (DL_FUNC) &_qs_check_SIMD, 0},
    {"_qs_zstd_compress_bound", (DL_FUNC) &_qs_zstd_compress_bound, 1},
    {"_qs_lz4_compress_bound", (DL_FUNC) &_qs_lz4_compress_bound, 1},
    {"_qs_zstd_compress_raw", (DL_FUNC) &_qs_zstd_compress_raw, 2},
    {"_qs_zstd_decompress_raw", (DL_FUNC) &_qs_zstd_decompress_raw, 1},
    {"_qs_lz4_compress_raw", (DL_FUNC) &_qs_lz4_compress_raw, 2},
    {"_qs_lz4_decompress_raw", (DL_FUNC) &_qs_lz4_decompress_raw, 1},
    {"_qs_blosc_shuffle_raw", (DL_FUNC) &_qs_blosc_shuffle_raw, 2},
    {"_qs_blosc_unshuffle_raw", (DL_FUNC) &_qs_blosc_unshuffle_raw, 2},
    {"_qs_xxhash_raw", (DL_FUNC) &_qs_xxhash_raw, 1},
    {"_qs_base85_encode", (DL_FUNC) &_qs_base85_encode, 1},
    {"_qs_base85_decode", (DL_FUNC) &_qs_base85_decode, 1},
    {"_qs_c_base91_encode", (DL_FUNC) &_qs_c_base91_encode, 1},
    {"_qs_c_base91_decode", (DL_FUNC) &_qs_c_base91_decode, 1},
    {"_qs_is_big_endian", (DL_FUNC) &_qs_is_big_endian, 0},
    {"_qs_qsave", (DL_FUNC) &_qs_qsave, 8},
    {"_qs_c_qsave", (DL_FUNC) &_qs_c_qsave, 8},
    {"_qs_qsave_fd", (DL_FUNC) &_qs_qsave_fd, 7},
    {"_qs_qsave_handle", (DL_FUNC) &_qs_qsave_handle, 7},
    {"_qs_qserialize", (DL_FUNC) &_qs_qserialize, 6},
    {"_qs_c_qserialize", (DL_FUNC) &_qs_c_qserialize, 6},
    {"_qs_qread", (DL_FUNC) &_qs_qread, 4},
    {"_qs_c_qattributes", (DL_FUNC) &_qs_c_qattributes, 4},
    {"_qs_c_qread", (DL_FUNC) &_qs_c_qread, 4},
    {"_qs_qread_fd", (DL_FUNC) &_qs_qread_fd, 3},
    {"_qs_qread_handle", (DL_FUNC) &_qs_qread_handle, 3},
    {"_qs_qread_ptr", (DL_FUNC) &_qs_qread_ptr, 4},
    {"_qs_qdeserialize", (DL_FUNC) &_qs_qdeserialize, 3},
    {"_qs_c_qdeserialize", (DL_FUNC) &_qs_c_qdeserialize, 3},
    {"_qs_qdump", (DL_FUNC) &_qs_qdump, 1},
    {"_qs_openFd", (DL_FUNC) &_qs_openFd, 2},
    {"_qs_readFdDirect", (DL_FUNC) &_qs_readFdDirect, 2},
    {"_qs_closeFd", (DL_FUNC) &_qs_closeFd, 1},
    {"_qs_openMmap", (DL_FUNC) &_qs_openMmap, 2},
    {"_qs_closeMmap", (DL_FUNC) &_qs_closeMmap, 2},
    {"_qs_openHandle", (DL_FUNC) &_qs_openHandle, 2},
    {"_qs_closeHandle", (DL_FUNC) &_qs_closeHandle, 1},
    {"_qs_openWinFileMapping", (DL_FUNC) &_qs_openWinFileMapping, 2},
    {"_qs_openWinMapView", (DL_FUNC) &_qs_openWinMapView, 2},
    {"_qs_closeWinMapView", (DL_FUNC) &_qs_closeWinMapView, 1},
    {"_qs_RcppExport_registerCCallable", (DL_FUNC) &_qs_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_qs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
